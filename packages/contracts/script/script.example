// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

import { Script } from "forge-std/Script.sol";
import { console } from "forge-std/console.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { stdToml } from "forge-std/StdToml.sol";
import { Strings } from "@openzeppelin/contracts/utils/Strings.sol";
import { WorldResourceIdLib } from "@latticexyz/world/src/WorldResourceId.sol";

import { WorldAddressHelper } from "./addressHelper.s.sol";
import { IWorld } from "../src/codegen/world/IWorld.sol";
import { Planet } from "../src/lib/Planet.sol";
import { Proof } from "../src/lib/SnarkProof.sol";
import { MoveInput } from "../src/lib/VerificationInput.sol";
import { Planet as PlanetTable, Player, PlanetOwner } from "../src/codegen/index.sol";

contract TestScript is WorldAddressHelper {
  /**
   * @notice This is an example for writing a script to interact with the contract
   * Usage:
   *    1. copy this file to `packages/contracts/script/test.s.sol`
   *    2. run `forge script TestScript --broadcast --rpc-url http://127.0.0.1:8545 -vvv`
   */
  function run() external {
    address worldAddress = getWorldAddress();
    // Specify a store so that you can use tables directly in PostDeploy
    StoreSwitch.setStoreAddress(worldAddress);

    // Load the private key from the `PRIVATE_KEY` environment variable (in .env)
    uint256 deployerPrivateKey = vm.envUint("PRIVATE_KEY");

    // Start broadcasting transactions from the deployer account
    vm.startBroadcast(deployerPrivateKey);

    Proof memory proof;
    MoveInput memory input;
    input.fromPlanetHash = 0x00000bdd0db70b93586f31baf2fa1e47006a371927a8bfa32d1686d9c0c8e9c3;
    input.toPlanetHash = 0x00008c071c4014d5c6839995fa4b328a1a5fe21186cbf68cb6625fefcf0af530;
    input.distance = 80;
    IWorld(worldAddress).df__move(proof, input, 2000000, 0, 0);
    IWorld(worldAddress).df__legacyMove(
      [uint256(0), 0],
      [[uint256(0), 0], [uint256(0), 0]],
      [uint256(0), 0],
      [
        0x00000bdd0db70b93586f31baf2fa1e47006a371927a8bfa32d1686d9c0c8e9c3,
        0x00008c071c4014d5c6839995fa4b328a1a5fe21186cbf68cb6625fefcf0af530,
        uint256(0),
        0,
        100,
        0,
        0,
        0,
        0,
        0,
        0
      ],
      2000000,
      0,
      0,
      0
    );
  }
}
