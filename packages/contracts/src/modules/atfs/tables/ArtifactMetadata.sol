// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

// Import user types
import { ArtifactRarity, ArtifactGenre } from "../../../codegen/common.sol";

struct ArtifactMetadataData {
  ArtifactGenre genre;
  uint32 charge;
  uint32 cooldown;
  bool durable;
  bool reusable;
  uint8 reqLevel;
  uint64 reqPopulation;
  uint64 reqSilver;
}

library ArtifactMetadata {
  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x001c080001040401010108080000000000000000000000000000000000000000);

  // Hex-encoded key schema of (uint256, uint8)
  Schema constant _keySchema = Schema.wrap(0x002102001f000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint8, uint32, uint32, bool, bool, uint8, uint64, uint64)
  Schema constant _valueSchema = Schema.wrap(0x001c080000030360600007070000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](2);
    keyNames[0] = "id";
    keyNames[1] = "rarity";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](8);
    fieldNames[0] = "genre";
    fieldNames[1] = "charge";
    fieldNames[2] = "cooldown";
    fieldNames[3] = "durable";
    fieldNames[4] = "reusable";
    fieldNames[5] = "reqLevel";
    fieldNames[6] = "reqPopulation";
    fieldNames[7] = "reqSilver";
  }

  /**
   * @notice Register the table with its config.
   */
  function register(ResourceId _tableId) internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register(ResourceId _tableId) internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get genre.
   */
  function getGenre(
    ResourceId _tableId,
    uint256 id,
    ArtifactRarity rarity
  ) internal view returns (ArtifactGenre genre) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint8(rarity)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return ArtifactGenre(uint8(bytes1(_blob)));
  }

  /**
   * @notice Get genre.
   */
  function _getGenre(
    ResourceId _tableId,
    uint256 id,
    ArtifactRarity rarity
  ) internal view returns (ArtifactGenre genre) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint8(rarity)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return ArtifactGenre(uint8(bytes1(_blob)));
  }

  /**
   * @notice Set genre.
   */
  function setGenre(ResourceId _tableId, uint256 id, ArtifactRarity rarity, ArtifactGenre genre) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint8(rarity)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked(uint8(genre)), _fieldLayout);
  }

  /**
   * @notice Set genre.
   */
  function _setGenre(ResourceId _tableId, uint256 id, ArtifactRarity rarity, ArtifactGenre genre) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint8(rarity)));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked(uint8(genre)), _fieldLayout);
  }

  /**
   * @notice Get charge.
   */
  function getCharge(ResourceId _tableId, uint256 id, ArtifactRarity rarity) internal view returns (uint32 charge) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint8(rarity)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get charge.
   */
  function _getCharge(ResourceId _tableId, uint256 id, ArtifactRarity rarity) internal view returns (uint32 charge) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint8(rarity)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set charge.
   */
  function setCharge(ResourceId _tableId, uint256 id, ArtifactRarity rarity, uint32 charge) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint8(rarity)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((charge)), _fieldLayout);
  }

  /**
   * @notice Set charge.
   */
  function _setCharge(ResourceId _tableId, uint256 id, ArtifactRarity rarity, uint32 charge) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint8(rarity)));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((charge)), _fieldLayout);
  }

  /**
   * @notice Get cooldown.
   */
  function getCooldown(ResourceId _tableId, uint256 id, ArtifactRarity rarity) internal view returns (uint32 cooldown) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint8(rarity)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get cooldown.
   */
  function _getCooldown(
    ResourceId _tableId,
    uint256 id,
    ArtifactRarity rarity
  ) internal view returns (uint32 cooldown) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint8(rarity)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set cooldown.
   */
  function setCooldown(ResourceId _tableId, uint256 id, ArtifactRarity rarity, uint32 cooldown) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint8(rarity)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((cooldown)), _fieldLayout);
  }

  /**
   * @notice Set cooldown.
   */
  function _setCooldown(ResourceId _tableId, uint256 id, ArtifactRarity rarity, uint32 cooldown) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint8(rarity)));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((cooldown)), _fieldLayout);
  }

  /**
   * @notice Get durable.
   */
  function getDurable(ResourceId _tableId, uint256 id, ArtifactRarity rarity) internal view returns (bool durable) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint8(rarity)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get durable.
   */
  function _getDurable(ResourceId _tableId, uint256 id, ArtifactRarity rarity) internal view returns (bool durable) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint8(rarity)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set durable.
   */
  function setDurable(ResourceId _tableId, uint256 id, ArtifactRarity rarity, bool durable) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint8(rarity)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((durable)), _fieldLayout);
  }

  /**
   * @notice Set durable.
   */
  function _setDurable(ResourceId _tableId, uint256 id, ArtifactRarity rarity, bool durable) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint8(rarity)));

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((durable)), _fieldLayout);
  }

  /**
   * @notice Get reusable.
   */
  function getReusable(ResourceId _tableId, uint256 id, ArtifactRarity rarity) internal view returns (bool reusable) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint8(rarity)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get reusable.
   */
  function _getReusable(ResourceId _tableId, uint256 id, ArtifactRarity rarity) internal view returns (bool reusable) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint8(rarity)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set reusable.
   */
  function setReusable(ResourceId _tableId, uint256 id, ArtifactRarity rarity, bool reusable) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint8(rarity)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((reusable)), _fieldLayout);
  }

  /**
   * @notice Set reusable.
   */
  function _setReusable(ResourceId _tableId, uint256 id, ArtifactRarity rarity, bool reusable) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint8(rarity)));

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((reusable)), _fieldLayout);
  }

  /**
   * @notice Get reqLevel.
   */
  function getReqLevel(ResourceId _tableId, uint256 id, ArtifactRarity rarity) internal view returns (uint8 reqLevel) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint8(rarity)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get reqLevel.
   */
  function _getReqLevel(ResourceId _tableId, uint256 id, ArtifactRarity rarity) internal view returns (uint8 reqLevel) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint8(rarity)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Set reqLevel.
   */
  function setReqLevel(ResourceId _tableId, uint256 id, ArtifactRarity rarity, uint8 reqLevel) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint8(rarity)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((reqLevel)), _fieldLayout);
  }

  /**
   * @notice Set reqLevel.
   */
  function _setReqLevel(ResourceId _tableId, uint256 id, ArtifactRarity rarity, uint8 reqLevel) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint8(rarity)));

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((reqLevel)), _fieldLayout);
  }

  /**
   * @notice Get reqPopulation.
   */
  function getReqPopulation(
    ResourceId _tableId,
    uint256 id,
    ArtifactRarity rarity
  ) internal view returns (uint64 reqPopulation) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint8(rarity)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (uint64(bytes8(_blob)));
  }

  /**
   * @notice Get reqPopulation.
   */
  function _getReqPopulation(
    ResourceId _tableId,
    uint256 id,
    ArtifactRarity rarity
  ) internal view returns (uint64 reqPopulation) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint8(rarity)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (uint64(bytes8(_blob)));
  }

  /**
   * @notice Set reqPopulation.
   */
  function setReqPopulation(ResourceId _tableId, uint256 id, ArtifactRarity rarity, uint64 reqPopulation) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint8(rarity)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((reqPopulation)), _fieldLayout);
  }

  /**
   * @notice Set reqPopulation.
   */
  function _setReqPopulation(ResourceId _tableId, uint256 id, ArtifactRarity rarity, uint64 reqPopulation) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint8(rarity)));

    StoreCore.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((reqPopulation)), _fieldLayout);
  }

  /**
   * @notice Get reqSilver.
   */
  function getReqSilver(
    ResourceId _tableId,
    uint256 id,
    ArtifactRarity rarity
  ) internal view returns (uint64 reqSilver) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint8(rarity)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (uint64(bytes8(_blob)));
  }

  /**
   * @notice Get reqSilver.
   */
  function _getReqSilver(
    ResourceId _tableId,
    uint256 id,
    ArtifactRarity rarity
  ) internal view returns (uint64 reqSilver) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint8(rarity)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (uint64(bytes8(_blob)));
  }

  /**
   * @notice Set reqSilver.
   */
  function setReqSilver(ResourceId _tableId, uint256 id, ArtifactRarity rarity, uint64 reqSilver) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint8(rarity)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((reqSilver)), _fieldLayout);
  }

  /**
   * @notice Set reqSilver.
   */
  function _setReqSilver(ResourceId _tableId, uint256 id, ArtifactRarity rarity, uint64 reqSilver) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint8(rarity)));

    StoreCore.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((reqSilver)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(
    ResourceId _tableId,
    uint256 id,
    ArtifactRarity rarity
  ) internal view returns (ArtifactMetadataData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint8(rarity)));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(
    ResourceId _tableId,
    uint256 id,
    ArtifactRarity rarity
  ) internal view returns (ArtifactMetadataData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint8(rarity)));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    ResourceId _tableId,
    uint256 id,
    ArtifactRarity rarity,
    ArtifactGenre genre,
    uint32 charge,
    uint32 cooldown,
    bool durable,
    bool reusable,
    uint8 reqLevel,
    uint64 reqPopulation,
    uint64 reqSilver
  ) internal {
    bytes memory _staticData = encodeStatic(
      genre,
      charge,
      cooldown,
      durable,
      reusable,
      reqLevel,
      reqPopulation,
      reqSilver
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint8(rarity)));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    ResourceId _tableId,
    uint256 id,
    ArtifactRarity rarity,
    ArtifactGenre genre,
    uint32 charge,
    uint32 cooldown,
    bool durable,
    bool reusable,
    uint8 reqLevel,
    uint64 reqPopulation,
    uint64 reqSilver
  ) internal {
    bytes memory _staticData = encodeStatic(
      genre,
      charge,
      cooldown,
      durable,
      reusable,
      reqLevel,
      reqPopulation,
      reqSilver
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint8(rarity)));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(ResourceId _tableId, uint256 id, ArtifactRarity rarity, ArtifactMetadataData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.genre,
      _table.charge,
      _table.cooldown,
      _table.durable,
      _table.reusable,
      _table.reqLevel,
      _table.reqPopulation,
      _table.reqSilver
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint8(rarity)));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(ResourceId _tableId, uint256 id, ArtifactRarity rarity, ArtifactMetadataData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.genre,
      _table.charge,
      _table.cooldown,
      _table.durable,
      _table.reusable,
      _table.reqLevel,
      _table.reqPopulation,
      _table.reqSilver
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint8(rarity)));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      ArtifactGenre genre,
      uint32 charge,
      uint32 cooldown,
      bool durable,
      bool reusable,
      uint8 reqLevel,
      uint64 reqPopulation,
      uint64 reqSilver
    )
  {
    genre = ArtifactGenre(uint8(Bytes.getBytes1(_blob, 0)));

    charge = (uint32(Bytes.getBytes4(_blob, 1)));

    cooldown = (uint32(Bytes.getBytes4(_blob, 5)));

    durable = (_toBool(uint8(Bytes.getBytes1(_blob, 9))));

    reusable = (_toBool(uint8(Bytes.getBytes1(_blob, 10))));

    reqLevel = (uint8(Bytes.getBytes1(_blob, 11)));

    reqPopulation = (uint64(Bytes.getBytes8(_blob, 12)));

    reqSilver = (uint64(Bytes.getBytes8(_blob, 20)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (ArtifactMetadataData memory _table) {
    (
      _table.genre,
      _table.charge,
      _table.cooldown,
      _table.durable,
      _table.reusable,
      _table.reqLevel,
      _table.reqPopulation,
      _table.reqSilver
    ) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(ResourceId _tableId, uint256 id, ArtifactRarity rarity) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint8(rarity)));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(ResourceId _tableId, uint256 id, ArtifactRarity rarity) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint8(rarity)));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    ArtifactGenre genre,
    uint32 charge,
    uint32 cooldown,
    bool durable,
    bool reusable,
    uint8 reqLevel,
    uint64 reqPopulation,
    uint64 reqSilver
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(genre, charge, cooldown, durable, reusable, reqLevel, reqPopulation, reqSilver);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    ArtifactGenre genre,
    uint32 charge,
    uint32 cooldown,
    bool durable,
    bool reusable,
    uint8 reqLevel,
    uint64 reqPopulation,
    uint64 reqSilver
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(
      genre,
      charge,
      cooldown,
      durable,
      reusable,
      reqLevel,
      reqPopulation,
      reqSilver
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(uint256 id, ArtifactRarity rarity) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(id));
    _keyTuple[1] = bytes32(uint256(uint8(rarity)));

    return _keyTuple;
  }
}

/**
 * @notice Cast a value to a bool.
 * @dev Boolean values are encoded as uint8 (1 = true, 0 = false), but Solidity doesn't allow casting between uint8 and bool.
 * @param value The uint8 value to convert.
 * @return result The boolean value.
 */
function _toBool(uint8 value) pure returns (bool result) {
  assembly {
    result := value
  }
}
