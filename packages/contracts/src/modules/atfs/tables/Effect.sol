// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

// Import user types
import { EffectType } from "../../../codegen/common.sol";

struct EffectData {
  EffectType effectType;
  uint8 modifierNumber;
  uint248 modifiers;
}

library Effect {
  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0021030001011f00000000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (uint8)
  Schema constant _keySchema = Schema.wrap(0x0001010000000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint8, uint8, uint248)
  Schema constant _valueSchema = Schema.wrap(0x0021030000001e00000000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "internalId";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](3);
    fieldNames[0] = "effectType";
    fieldNames[1] = "modifierNumber";
    fieldNames[2] = "modifiers";
  }

  /**
   * @notice Register the table with its config.
   */
  function register(ResourceId _tableId) internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register(ResourceId _tableId) internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get effectType.
   */
  function getEffectType(ResourceId _tableId, uint8 internalId) internal view returns (EffectType effectType) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(internalId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return EffectType(uint8(bytes1(_blob)));
  }

  /**
   * @notice Get effectType.
   */
  function _getEffectType(ResourceId _tableId, uint8 internalId) internal view returns (EffectType effectType) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(internalId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return EffectType(uint8(bytes1(_blob)));
  }

  /**
   * @notice Set effectType.
   */
  function setEffectType(ResourceId _tableId, uint8 internalId, EffectType effectType) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(internalId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked(uint8(effectType)), _fieldLayout);
  }

  /**
   * @notice Set effectType.
   */
  function _setEffectType(ResourceId _tableId, uint8 internalId, EffectType effectType) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(internalId));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked(uint8(effectType)), _fieldLayout);
  }

  /**
   * @notice Get modifierNumber.
   */
  function getModifierNumber(ResourceId _tableId, uint8 internalId) internal view returns (uint8 modifierNumber) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(internalId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get modifierNumber.
   */
  function _getModifierNumber(ResourceId _tableId, uint8 internalId) internal view returns (uint8 modifierNumber) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(internalId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Set modifierNumber.
   */
  function setModifierNumber(ResourceId _tableId, uint8 internalId, uint8 modifierNumber) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(internalId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((modifierNumber)), _fieldLayout);
  }

  /**
   * @notice Set modifierNumber.
   */
  function _setModifierNumber(ResourceId _tableId, uint8 internalId, uint8 modifierNumber) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(internalId));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((modifierNumber)), _fieldLayout);
  }

  /**
   * @notice Get modifiers.
   */
  function getModifiers(ResourceId _tableId, uint8 internalId) internal view returns (uint248 modifiers) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(internalId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint248(bytes31(_blob)));
  }

  /**
   * @notice Get modifiers.
   */
  function _getModifiers(ResourceId _tableId, uint8 internalId) internal view returns (uint248 modifiers) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(internalId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint248(bytes31(_blob)));
  }

  /**
   * @notice Set modifiers.
   */
  function setModifiers(ResourceId _tableId, uint8 internalId, uint248 modifiers) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(internalId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((modifiers)), _fieldLayout);
  }

  /**
   * @notice Set modifiers.
   */
  function _setModifiers(ResourceId _tableId, uint8 internalId, uint248 modifiers) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(internalId));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((modifiers)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(ResourceId _tableId, uint8 internalId) internal view returns (EffectData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(internalId));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(ResourceId _tableId, uint8 internalId) internal view returns (EffectData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(internalId));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    ResourceId _tableId,
    uint8 internalId,
    EffectType effectType,
    uint8 modifierNumber,
    uint248 modifiers
  ) internal {
    bytes memory _staticData = encodeStatic(effectType, modifierNumber, modifiers);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(internalId));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    ResourceId _tableId,
    uint8 internalId,
    EffectType effectType,
    uint8 modifierNumber,
    uint248 modifiers
  ) internal {
    bytes memory _staticData = encodeStatic(effectType, modifierNumber, modifiers);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(internalId));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(ResourceId _tableId, uint8 internalId, EffectData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.effectType, _table.modifierNumber, _table.modifiers);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(internalId));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(ResourceId _tableId, uint8 internalId, EffectData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.effectType, _table.modifierNumber, _table.modifiers);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(internalId));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  ) internal pure returns (EffectType effectType, uint8 modifierNumber, uint248 modifiers) {
    effectType = EffectType(uint8(Bytes.getBytes1(_blob, 0)));

    modifierNumber = (uint8(Bytes.getBytes1(_blob, 1)));

    modifiers = (uint248(Bytes.getBytes31(_blob, 2)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (EffectData memory _table) {
    (_table.effectType, _table.modifierNumber, _table.modifiers) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(ResourceId _tableId, uint8 internalId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(internalId));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(ResourceId _tableId, uint8 internalId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(internalId));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    EffectType effectType,
    uint8 modifierNumber,
    uint248 modifiers
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(effectType, modifierNumber, modifiers);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    EffectType effectType,
    uint8 modifierNumber,
    uint248 modifiers
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(effectType, modifierNumber, modifiers);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(uint8 internalId) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(internalId));

    return _keyTuple;
  }
}
